//HintName: Spangle.LusterBits.Tests.TestClass.BasicTypes.g.cs
// <auto-generated/>
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

using System;
using Spangle.LusterBits;

namespace Spangle.LusterBits.Tests.TestClass;

public unsafe partial struct BasicTypes : IBasicTypes
{
    public int IntField => (int)(_data[0] >>> 4);

    public long LongField => (long)(((long)(_data[0] & 0x0F) << 4) + ((long)_data[1] >>> 4));

    public float FloatField => (float)((_data[1] & 0x0F));

    public double DoubleField => (double)(_data[2]);

    public bool BoolField => 0 != (_data[3] >>> 7);

    public byte ByteField => (byte)((_data[3] & 0x40) >>> 6);

    public sbyte SByteField => (sbyte)((_data[3] & 0x20) >>> 5);

    public short ShortField => (short)((_data[3] & 0x18) >>> 3);

    public ushort UShortField => (ushort)((_data[3] & 0x06) >>> 1);

    public uint UIntField => (uint)(((uint)(_data[3] & 0x01) << 3) + ((uint)_data[4] >>> 5));

    public ulong ULongField => (ulong)(((ulong)(_data[4] & 0x1F) << 3) + ((ulong)_data[5] >>> 5));

    public decimal DecimalField => (decimal)(((_data[5] & 0x1F) << 11) + (_data[6] << 3) + (_data[7] >>> 5));

    public string StringField => new UTF8String(DataAsSpan().Slice(50, 30)).ToString();

    public string UTF8StringField => new UTF8String(DataAsSpan().Slice(80, 30)).ToString();

    public string UTF16StringField => new UTF16String(DataAsSpan().Slice(110, 20)).ToString();

    public string UTF16BigEndianStringField => new UTF16BigEndianString(DataAsSpan().Slice(130, 40)).ToString();

    internal Span<byte> DataAsSpan()
    {
        fixed (byte* ptr = _data)
        {
            return new Span<byte>(ptr, 256);
        }
    }
}
